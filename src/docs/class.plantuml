@startuml Blackjack

class Game {
  -array<int,Player> players
  -Dealer dealer
  +__construct()
  +play()
  -set()
  -start()
  -action()
  -result()
  -end()
}

class Message {
  +getSettingMessage()
  +getInputNumOfPlayerMessage()
  +getSettingInputErrorMessage()
  +getStartMessage()
  +getFirstHandMessage()
  +getDealerFirstHandMessage()
  +getLoseByBurstMessage()
  +getProgressMessage()
  +getProgressQuestionMessage()
  +getCardDrawnMessage()
  +getInputErrorMessage()
  +getScoreTotalResultMessage()
  +getStandMessage()
  +getDealerBurstMessage()
  +getWinByBurstMessage()
  +getResultMessage()
  +getEndMessage()
}

class Player {
  -string name
  -array<int,array<string,int|string>> hand
  -int scoreTotal
  -int countAce
  -string status
  +__construct()
  +getName()
  +getHand()
  +getScoreTotal()
  +getCountAce()
  +getStatus()
  +action()
  #selectHitOrStand()
  +addACardToHand()
  +calcScoreTotal()
  -calcAceScore()
  +changeStatus()
}

class Dealer {
  -NUM_OF_FIRST_HAND
  -string name
  -array hand
  -int scoreTotal
  -int countAce
  -string status
  -Deck deck
  +__construct()
  +dealOutFirstHand()
  +dealOneCard()
  +checkBurst()
  +judgeWinOrLose()
  -hasStand()
  -compareScoreTotal()
  +action()
  +selectHitOrStand()
}

class NonPlayerCharacter {
  #selectHitOrStand()
}

class Deck {
  -array<int,array<string,int|string>> deck
  +__construct()
  +getDeck()
  +initDeck()
  +takeACard()
}

class Card {
  -CARD_SCORE
  -array suits
  +createNewDeck()
}

Game -- Player
Game -- NonPlayerCharacter
Game -- Dealer
Game -- Message
Message -- Player
Message -- Dealer
Dealer -- Player
Dealer -- Deck
Deck -- Card

Player <|-- Dealer
Player <|-- NonPlayerCharacter

@enduml

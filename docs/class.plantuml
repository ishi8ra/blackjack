@startuml Blackjack

class Game {
  -CONTINUE
  -STOP
  -Deck deck
  -Dealer dealer
  -array<int,Player> players
  -string status

  +__construct()
  +play()
  -set()
  -placeYourBets()
  -start()
  -action()
  -result()
  -calcChips()
  -selectContinueOrStop()
  -end()
}

class Deck {
  -array<int,array<string,int|string>> deck

  +__construct()
  +getDeck()
  +initDeck()
  +takeACard()
}

class Card {
  -CARD_SCORE

  -array suits
  +createNewDeck()
}

class Dealer {
  -NUM_OF_FIRST_HAND
  -DealerPlayer dealerPlayer
  -Judge judge
  -ChipCalculator chipCalculator

  +__construct()
  +getDealerPlayer()
  +getJudge()
  +getChipCalculator()
  +dealOutFirstHand()
  +dealOneCard()
}

class Judge {
  +checkBurst()
  +judgeWinOrLose()
  -hasStand()
  -compareScoreTotal()
}

class ChipCalculator {
  +calcChips()
}

abstract Player {
  -string name
  -int chips
  -int bets
  -array<int,array<string,int|string>> hand
  -int scoreTotal
  -int countAce
  -string status

  +__construct()
  +getName()
  +getChips()
  +getBets()
  +getHand()
  +getScoreTotal()
  +getStatus()
  +addACardToHand()
  +calcScoreTotal()
  -calcAceScore()
  +changeStatus()
  +changeBets()
  +changeChips()
  +reset()
}

interface PlayerAction {
  +action()
  +selectHitOrStand()
}

interface PlayerBet {
  +bet()
  +selectBets()
}

class DealerPlayer {
  +action()
  +selectHitOrStand()
}

class ManualPlayer {
  +bet()
  +selectBets()
  +action()
  +selectHitOrStand()
}

class AutoPlayer {
  +bet()
  +selectBets()
  +action()
  +selectHitOrStand()
}

class Validator <<trait>> {
  +validateInputBets()
}

class Message {
  +getSettingMessage()
  +getInputNumOfPlayerMessage()
  +getSettingInputErrorMessage()

  +getPlaceYourBetsMessage()

  +getStartMessage()
  +getFirstHandMessage()
  +getDealerFirstHandMessage()
  +getLoseByBurstMessage()

  +getProgressMessage()
  +getProgressQuestionMessage()
  +getCardDrawnMessage()
  +getInputErrorMessage()

  +getScoreTotalResultMessage()
  +getStandMessage()
  +getDealerBurstMessage()
  +getWinByBurstMessage()
  +getResultMessage()

  +getEndMessage()
}

Game *-- Deck
Deck *-- Card
Game *-- Dealer
Deck - Dealer
Dealer - Player
Dealer *-- Judge
Dealer *-- ChipCalculator
Dealer *-- DealerPlayer
Game -- Player
Game --- ManualPlayer
Game --- AutoPlayer
Player <|--- DealerPlayer
Player <|--- ManualPlayer
Player <|--- AutoPlayer
PlayerAction <|.. DealerPlayer
PlayerAction <|.. ManualPlayer
PlayerAction <|.. AutoPlayer
PlayerBet <|.. ManualPlayer
PlayerBet <|.. AutoPlayer
ManualPlayer -- Validator
AutoPlayer -- Validator
Game -- Message

@enduml
